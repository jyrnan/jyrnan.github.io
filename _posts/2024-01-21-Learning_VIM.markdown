---
layout: post
title:  "Learning VIM"
date:   2024-01-21 16:19:58 +0800
categories: Nothing
---

今天学习了VIM的编辑模式，没想到这个软件居然是如此的强大。虽然学习曲线有点陡峭，但是一旦掌握了以后发现真的是对于输入和修改的效率的提升那也是肉眼可见的。

尤其是对于文本的操作，基本上可以脱离了鼠标了。很多时候，感觉是用一种命令式样的方式来进行文本的修改。
对于程序修改调试的过程来说，更多的时候是对于代码的阅读，然后进行少量的修改，所以这时候需要更多的对于文本编辑的导航，然后到达目标位置后，进行修改。

## Nomal Mode 或者称为导航模式 
大部分时候，VIM都应该是在Nomal mode。在这种模式下，实现的主要功能是对光标的导航，定位到需要修改的位置，然后切换到相应的模式，进行插入，增加修改，或者是视觉模式来选择更多的区域。一旦修改完成，立刻切换回来。进行下一操作位置的导航。通过完善的光标导航命令，VIM可以让我们基本不需要用到鼠标。而达到这一目标，在于VIM设计了相当丰富的键盘导航功能：
- 基本移动的四个按键`hijk` 
- 基于词：`w`下一个词`b`词首`e`词尾
- 基于行：`0`行初， `^`第一个非空格字符， `$`行尾
- 屏幕：`H`屏幕行首， `M`屏幕中央，`L` 屏幕底部
- 页面：`ctrl+u`上翻， `ctrl+d`下翻
- 文件：`gg`文件头， `G`文件尾
- 行数：`{linenumber}G`直接定位到该行， 或者命令模式下输入行数回车
- 查找：`f/F{content}`查找内容`t/T{content}`相反方向选定查找内容
- 搜索：`/{Regix}` 查找表达式内容， `n/N`用于匹配向后/向前的下一个
## 选择模式
这是一种可视化选择模式，选择的内容用来执行操作
- 普通：`v`
- 行类型：`V`
- 块类型：`Ctrl+V`
## 编辑
通过前面两种模式的导航或选择，光标到了相应的位置或者选择了相应的字符，这时候就可以进行编辑了。所以编辑的命令也可以称之为是“动词”
- insert: 
    - `i` insert in current position
    - `o` insert new line behind current line
    - `O` insert new line above current line
- delete: `d` is delete command, you can add some sub command 
     - `dd` delete total line
     - `dw` delet a word
     - `d$` delete total line to end
     - `dO` delete total line to begin
- Copy: `y`; `yy` copy total line and etc
- Paste: `p`; `p` paster total line below, `P` paste total line above
还有个很有用的工具，例如`~`可以用来改变字符的大小写
## 计数
大部分命令在执行时候可以先结合一个数字来执行，将执行指定操作若干次，例如：
- `3w` 表示向后移动三个词
- `5j` 表示向下移动5行
- `7dw` 表示删除7个词
## 修饰语
通过修饰语来改变名词的含义，修饰语主要有`i/a`,分别表示在里面或者周围，例如：
- `ci(` 改变当前括号内的内容
- `da'` 表示删除单引号内的内容，包括周围的单引号

# 总结
通过以上的内容，大致可以了解到VIM强大在于
- 通过键盘进行光标导航和选择范围的控制
- 然后对光标或选择的内容执行操作
- 执行操作命令的时候可以通过一定计数词或修饰词让其执行的更高效

> 本文中的所有内容都是利用VIM来编写